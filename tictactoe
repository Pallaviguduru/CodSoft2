def print_board(board):
    """Prints the current state of the board."""
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_winner(board, player):
    """Checks if the player has won."""
    # Check rows
    for row in board:
        if all(cell == player for cell in row):
            return True

    # Check columns
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True

    # Check diagonals
    if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
        return True

    return False

def is_board_full(board):
    """Checks if the board is full."""
    return all(cell != ' ' for row in board for cell in row)

def get_player_move(board, player):
    """Gets the player's move."""
    while True:
        try:
            row, col = map(int, input(f"Player '{player}', enter your move (row[1-3] column[1-3]): ").split())
            if 1 <= row <= 3 and 1 <= col <= 3 and board[row-1][col-1] == ' ':
                return row - 1, col - 1
            else:
                print("Invalid move! Try again.")
        except ValueError:
            print("Invalid input! Enter two numbers separated by space.")

def tic_tac_toe():
    """Main function to play Tic-Tac-Toe."""
    board = [[' ' for _ in range(3)] for _ in range(3)]
    players = ['X', 'O']
    turn = 0

    while True:
        print_board(board)
        player = players[turn % 2]
        row, col = get_player_move(board, player)
        board[row][col] = player
        
        if check_winner(board, player):
            print_board(board)
            print(f"Player '{player}' wins!")
            break
        
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break
        
        turn += 1

if __name__ == "__main__":
    tic_tac_toe()
